# Stage 1: Build the Go binary
FROM golang:latest AS tester

# Set the working directory inside the container
WORKDIR /app

# Copy the go.mod and go.sum files to download dependencies
# Copying these files separately allows Docker to cache the downloaded modules
COPY go.mod go.sum ./
RUN go mod download

# Copy the source code into the container
COPY . .

# Build the application
# -o flag sets the output binary name
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o starter-go-postgresql-test .

# Stage 2: Create a smaller image for the final binary
FROM alpine:latest

# Add any necessary runtime dependencies for your application here
# RUN apk --no-cache add <dependencies>

# Copy the pre-built binary file from the tester stage
COPY --from=tester /app/starter-go-postgresql-test /root/

# Set the working directory for the container
WORKDIR /root/

# Run the binary when the container starts
CMD ["./starter-go-postgresql-test"]
