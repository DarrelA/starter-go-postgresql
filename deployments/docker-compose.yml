version: '3.8'
services:
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - '6500:5432'
    volumes:
      - progresDB_${APP_ENV}:/var/lib/postgresql/data
    env_file:
      - ../internal/infrastructure/config/.env.${APP_ENV}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d $POSTGRES_DB -U $POSTGRES_USER']
      interval: 5s
      timeout: 5s
      retries: 5

  pgAdmin:
    image: dpage/pgadmin4
    container_name: pgAdmin
    ports:
      - '5050:80'
    volumes:
      - ../internal/infrastructure/db/postgres/json/servers.${APP_ENV}.json:/pgadmin4/servers.json
    env_file:
      - ../internal/infrastructure/config/.env.${APP_ENV}

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redisDB_${APP_ENV}:/data
    depends_on:
      postgres:
        condition: service_healthy

  app:
    build:
      context: ..
      dockerfile: ./deployments/Dockerfile
    image: starter-go-postgresql
    container_name: starter-go-postgresql
    ports:
      - '8080:8080'
    volumes:
      - ./logs:/docker_wd/logs
    environment:
      - APP_ENV=${APP_ENV}
    env_file:
      - ../internal/infrastructure/config/.env.${APP_ENV}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  app-test:
    build:
      context: ..
      dockerfile: ./deployments/Dockerfile.test
    image: starter-go-postgresql-tester
    container_name: starter-go-postgresql-tester
    ports:
      - '8080:8080'
    volumes:
      - ./logs:/docker_wd/logs
      - ../test/reports:/docker_wd/test/reports
    environment:
      - APP_ENV=${APP_ENV}
    env_file:
      - ../internal/infrastructure/config/.env.${APP_ENV}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

volumes:
  redisDB_dev:
  progresDB_dev:
  redisDB_test:
  progresDB_test:
  redisDB_prod:
  progresDB_prod:
